Καμάρης Άγγελος
sdi1900070




    Ο κώδικάς μου δέχεται το αρχείο csv που δίνεται από το αρχείο .zip, καθώς κάνει import το αρχείο csp.py.
στο αρχείο μου επίσης περιέχονται τα: search.py και utils.py που γίνονται import στην csp.py.

για να τρέξει καλείται η εντολή:

python3 exam_timetabling.py /
python exam_timetabling.py 


    Για το πρόγραμμα δέχομαι τις πληροφορίες του αρχείου: Στοιχεία Μαθημάτων.csv και τις αποθηκεύω σε μια λίστα
από λίστες την οποία ονομάζω array. Ύστερα από την array παίρνω τα ονόματα των μαθημάτων τα οποία αποθηκεύω στην
μεταβλητή variables που θα αποτελέσουν τις μεταβλητές που θα χρησιμοποιήσω για την ικανοποίηση των περιορισμών.
Δημιουργώ μετά ένα dict το dom το οποίο αποθηκεύει για κάθε μάθημα (κλειδί) ένα tuple από το 1,1 εως το 21,3
για τα μαθήματα που δεν έχουν εργαστήριο και 1,1 εως το 21,2 για τα μαθήματα που έχουν καθώς δεν γίνεται να μπουν
3-6 γιατί δεν θα γίνει το εργαστήριο μετά το μάθημα.Αυτή χρησιμοποιείται ως το πεδίο ορισμού του προβλήματός μου,
καθώς κάθε μεταβλητή μπορεί να μπει οποιαδήποτε ώρα (εκτός αν έχει εργαστήριο που δεν μπορεί να μπει τελευταία),
όσο αυτό δεν δημιουργεί προβλήματα. Επείσης έχω την μεταβλητή neighbours, η οποία είναι μια dict που χρησιμοποιεί
ένα μάθημα(κλειδί) το οποίο έχει όλα τα υπόλοιπα (εκτός από το ίδιο) μαθήματα η οποία μεταβλητή μας λέει ποια μαθ-
ήματα είναι πιθανό να έχουν συγκρούσεις. Στο τέλος του README.txt αναφέρομαι και στις συναρτήσεις που δημιούργησα
για την ομαλότερη λειτουργία του exam_timetabling.py.

    Έχω την συνάρτηση time_constraints η οποία δέχεται 2 μαθήματα και τα tuple του domain τους και εξετάζει αν
υπάρχει σύγκρουση. Για να υπάρχει σύγκρουση εξετάζονται με την σειρά:
Αν έχουν απόσταση κάτω από 2 μέρες τα μαθήματα, εξετάζεται:
    Αν είναι και τα 2 δύσκολα, που τότε έχουμε σύγκρουση
    Αν τα μαθήματα είναι την ίδια μέρα, εξετάζεται:
        Αν είναι την ίδια ώρα που τότε έχουμε σύγκρουση.
        Αν είναι το ίδιο εξάμηνο, τότε έχουμε σύγκρουση.
        Αν έχουν τον ίδιο Καθηγητή, τότε έχουμε σύγκρουση.
        Αν το πρώτο είναι εργαστήριο και το δεύτερο είναι μια ώρα μετά το πρώτο, τότε έχουμε σύγκρουση.
        Αν το δεύτερο είναι εργαστήριο και το πρώτο είναι μια ώρα μετά το δεύτερο, τότε έχουμε σύγκρουση.


Αν όλοι αυτοί οι περιορισμοί τηρούνται, δεν έχουμε σύγκρουση.


    Ύστερα καλώ με την σειρά: MAC, MINCONFLICTS, FC, τις συναρτήσεις που μου παρέχονται από το αρχείο csp.py και
εκτυπώνω τον χρόνο, το display που παρέχει το csp καθώς και το πρόγραμμα από κάτω. O MAC χρειάζεται από 6-10
δευτερόλεπτα για να τελειώσει ενώ οι MINCONFLICTS και FC χρειάζονται λιγότερο από ένα δευτερόλεπτο. Οι λιγότερες
μέρες που κατάφερα να βρω ήταν 19, με τον FC.


Έχω δημιουργήσει την συνάρτηση index_2d ώστε να της δίνω την λίστα από λίστες array και το μάθημα που θέλω, ώστε
να βρίσκει την θέση του στον array για να έχω πρόσβαση σε όλες του τις πληροφορίες σε συναρτήσεις όπως η
time_constraints. Και την συνάρτηση program η οποία εκτυπώνει το αποτέλεσμα του timetable tmtbl που δημιουργώ στην
main, με την σειρά των ωρών, ώστε να είναι πιο ξεκάθαρο.

!Δεν τοποθετώ ο ίδιος τα εργαστήρια στο πρόγραμμα που εκτυπώνω, απλά αφήνω κενή την επόμενη ώρα θεωρόντας δεδομένο
ότι θα βρεθούν εκεί.

Ευχαριστώ για τον χρόνο σας!